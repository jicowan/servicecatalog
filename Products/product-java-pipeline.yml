AWSTemplateFormatVersion: '2010-09-09'
Description: Product Delivery Pipeline
Parameters:
  StackName:
    Type: String
    Description: The name of the parent Fargate networking stack that you created. Necessary
                 to locate and reference resources created by that stack.
  TeamName:
    Type: String
    Description: The name of your team.
  ServiceName:
    Type: String
    Default: nginx
    Description: A name for the service
  ContainerPort:
    Type: Number
    Default: 8080
    Description: What port number the application inside the docker container is binding to
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  Path:
    Type: String
    Default: "*"
    Description: A path on the public load balancer that this service
                 should be connected to. Use * to send all load balancer
                 traffic to this service.
  HealthCheckPath:
    Type: String
    Default: "/"
    Description: A path used to verify the health of the service.
  Priority:
    Type: Number
    Default: 1
    Description: The priority for the routing rule added to the load balancer.
                 This only applies if your have multiple services which have been
                 assigned to different paths on the load balancer.
  DesiredCount:
    Type: Number
    Default: 0
    Description: How many copies of the service task to run
  Role:
    Type: String
    Default: ""
    Description: (Optional) The Arn of an IAM role to give the service's containers if the code within needs to
                 access other AWS resources like S3 buckets, DynamoDB tables, etc

Conditions:
  HasCustomRole: !Not [ !Equals [!Ref 'Role', ''] ]

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Stack Configuration"
        Parameters:
          - StackName
          - TeamName
      -
        Label:
          default: "Service Configuration"
        Parameters:
          - ServiceName
          - ContainerPort
          - ContainerCpu
          - ContainerMemory
          - DesiredCount
          - Role
      -
        Label:
          default: "Load Balancer Configuration"
        Parameters:
          - Path
          - HealthCheckPath
          - Priority

Resources:
  PipelineS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy : Delete
    Properties:
      BucketName: !Join ['-',[ !Ref "AWS::AccountId", !Ref TeamName]]

  ContainerRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Join ['-',[!Ref 'TeamName', !Ref 'ServiceName']]
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
        -
          Sid: AllowPushPull
          Effect: Allow
          Principal:
            AWS:
              - !Join ["",["arn:aws:iam::",!Ref "AWS::AccountId",":root"]]
          Action:
            - "ecr:*"

  CloudFormationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub cfn-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - 'cloudformation.amazonaws.com'
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-CloudFormationExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: Allow
                Resource:
                  - '*'
                Action:
                  - ecs:*
                  - ecr:*
                  - cloudwatch:*
                  - logs:*
                  - ec2:*
                  - route53:*
                  - elasticloadbalancing:*
                  - apigateway:*
                  - iam:*
                  - autoscaling:*
                  - application-autoscaling:*
                  - sns:*

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub cb-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - 'codebuild.amazonaws.com'
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-CodeBuildPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
              - Resource:
                  - !Join ['',["arn:aws:s3:::",!Ref PipelineS3Bucket,"/*"]]
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: !Join ['',["arn:aws:ecr:",!Ref "AWS::Region",":",!Ref "AWS::AccountId",":repository/",!Ref "ContainerRepository"]]
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub cp-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - 'codepipeline.amazonaws.com'
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Resource:
                  - !Join ['',["arn:aws:s3:::",!Ref "PipelineS3Bucket","/*"]]
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:Get*
                  - s3:List*
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - codecommit:List*
                  - codecommit:Get*
                  - codecommit:GitPull
                  - codecommit:UploadArchive
                  - codecommit:CancelUploadArchive
                  - cloudformation:*
                  - ecs:*
                  - iam:PassRole

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.1
          phases:
            install:
              commands:
                - apt-get update && apt-get -y install default-jdk maven
            pre_build:
              commands:
                - printenv
                - java -version
                - echo -n "$CODEBUILD_LOG_PATH" > /tmp/build_id.out
                - printf "%s:%s" "$REPOSITORY_URI" "$(cat /tmp/build_id.out)" > /tmp/build_tag.out
                - printf '{"tag":"%s"}' "$(cat /tmp/build_id.out)" > /tmp/build.json
                - printf "$(cat /tmp/build.json)"
                - $(aws ecr get-login --region $AWS_DEFAULT_REGION)
                - mvn package
            build:
              commands:
                - echo Build started on `date`
                - echo -n "$CODEBUILD_LOG_PATH" > /tmp/build_id.out
                - echo Building the Docker image...
                - docker build -t $REPOSITORY_URI:$CODEBUILD_LOG_PATH -t $REPOSITORY_URI:latest .
            post_build:
              commands:
                - docker push $REPOSITORY_URI:$CODEBUILD_LOG_PATH
                - docker push $REPOSITORY_URI:latest
                - echo Build completed on `date`
                - printf '[{"name":"%s", "imageUri":"%s"}]' $CONTAINER_NAME $REPOSITORY_URI:$CODEBUILD_LOG_PATH > /tmp/imagedefinitions.json
          artifacts:
            files:
              - /tmp/build.json
              - /tmp/imagedefinitions.json
            discard-paths: yes
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/docker:1.12.1"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${TeamName}-${ServiceName}
          - Name: PipelineS3Bucket
            Value: !Ref PipelineS3Bucket
          - Name: CONTAINER_NAME
            Value: !Join ['-',[!Ref 'TeamName', !Ref 'ServiceName']]
      Name: !Ref AWS::StackName
      ServiceRole: !Ref CodeBuildServiceRole

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub '${TeamName}-${ServiceName}-pipeline'
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineS3Bucket
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              Configuration:
                RepositoryName:
                  Fn::ImportValue:
                    !Join [':', [!Ref 'StackName', 'CCName']]
                BranchName: master
              OutputArtifacts:
                - Name: App
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: ECS
              Configuration:
                ClusterName:
                  Fn::ImportValue:
                    !Join [':', [!Ref 'StackName', 'ClusterName']]
                ServiceName: !Join ['-',[!Ref 'ServiceName','svc']]
                FileName: imagedefinitions.json
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 1

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ECSTaskExecutionRole']]
      TaskRoleArn:
        Fn::If:
          - 'HasCustomRole'
          - !Ref 'Role'
          -
            Fn::ImportValue:
              !Join [':', [!Ref 'StackName', 'ECSTaskExecutionRole']]
      ContainerDefinitions:
        - Name: !Join ['-',[!Ref 'TeamName', !Ref 'ServiceName']]
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !Join ['', [!Ref 'AWS::AccountId', '.dkr.ecr.', !Ref 'AWS::Region', '.amazonaws.com/', !Ref 'TeamName', '-', !Ref 'ServiceName',':latest']]
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
          LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref LogGroup
                awslogs-region: !Ref "AWS::Region"
                awslogs-stream-prefix: 'fargate'

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  LogGroup:
    Type : AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/',['/fargate', 'service', !Ref 'ServiceName']]
      RetentionInDays: 14

  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      ServiceName: !Join ['-', [!Ref 'ServiceName', 'svc']]
      Cluster:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ClusterName']]
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'FargateContainerSecurityGroup']]
          Subnets:
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'PublicSubnetOne']]
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'PublicSubnetTwo']]
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: !Join ['-',[!Ref 'TeamName', !Ref 'ServiceName']]
          ContainerPort: !Ref 'ContainerPort'
          TargetGroupArn: !Ref 'TargetGroup'

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: !Ref 'HealthCheckPath'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 10
      TargetType: ip
      Name: !Join ['-',[!Ref 'ServiceName','TG']]
      Port: !Ref 'ContainerPort'
      Protocol: HTTP
      UnhealthyThresholdCount: 10
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'VPCId']]

  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [!Ref 'Path']
      ListenerArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'PublicListener']]
      Priority: !Ref 'Priority'
Outputs:
  PipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}
  ContainerRepository:
    Value: !Ref ContainerRepository
  PipelineS3Bucket:
    Value: !Ref PipelineS3Bucket
